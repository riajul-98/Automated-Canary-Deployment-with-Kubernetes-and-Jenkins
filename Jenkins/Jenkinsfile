pipeline {
    agent any
    environment {
        DOCKER_IMAGE_STABLE = 'riajul98/my-flask-app:stable'
        DOCKER_IMAGE_CANARY = 'riajul98/my-flask-app:canary'
        WORK_DIR = '/home/ec2-user/Automated-Canary-Deployment-with-Kubernetes-and-Jenkins/app'
    }
    stages {
        stage('Build Docker Images') {
            steps {
                dir("${WORK_DIR}") {
                    sh 'docker build -t ${DOCKER_IMAGE_STABLE} .'
                    sh 'docker build -t ${DOCKER_IMAGE_CANARY} .'
                }
            }
        }
        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        sh 'docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS'
                        sh 'docker push ${DOCKER_IMAGE_STABLE}'
                        sh 'docker push ${DOCKER_IMAGE_CANARY}'
                    }
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-credentials', variable: 'KUBECONFIG_FILE')]) {
                    sh '''
                    mkdir -p $HOME/.kube
                    cp $KUBECONFIG_FILE $HOME/.kube/config
                    chmod 600 $HOME/.kube/config

                    # Deploy Stable and Canary versions
                    kubectl apply -f /home/ec2-user/Automated-Canary-Deployment-with-Kubernetes-and-Jenkins/kubernetes/stable-deployment.yml 
                    kubectl apply -f /home/ec2-user/Automated-Canary-Deployment-with-Kubernetes-and-Jenkins/kubernetes/canary-deployment.yml
                    kubectl apply -f /home/ec2-user/Automated-Canary-Deployment-with-Kubernetes-and-Jenkins/kubernetes/service.yml
                    kubectl apply -f /home/ec2-user/Automated-Canary-Deployment-with-Kubernetes-and-Jenkins/kubernetes/ingress.yml
                    '''
                }
            }
        }
    }
}
